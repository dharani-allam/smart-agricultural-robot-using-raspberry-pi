#gardener.py
LIGHT_PIN = 20
PUMP_PIN = 12
import cv2
import numpy as np
from PCA9685 import PCA9685
import threading
import schedule
import time 
import atexit
pwm = PCA9685(0x40,debug=False)
pwm.setPWMFreq(50)
pwm.setServoPosition(0,90)
cap = cv2.VideoCapture(0)
cap.set(3,480)
cap.set(4,320)
_,frame = cap.read()
rows,cols,_ = frame.shape
x_medium = int(cols/2)
center = int(cols/2)
position = 90 # degrees
try:
import RPi.GPIO as GPIO
except RuntimeError:
print(“Error importing RPi.GPIO!”) 
GPIO.setmode(GPIO.BCM)
GPIO.setup(LIGHT_PIN,GPIO.OUT)
GPIO.setup(PUMP_PIN,GPIO.OUT)
While True:
_,frame = cap.read()
hsv_frame = cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)
#green leaves color
low_red = np.array([161,155,84]0
high_red = np.array([179,255,255])
red_mask = cv2.inRange(hsv_frame, low_red, high_red)
_,contours,_ = cv2.findContours(red_mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
contours = sorted(contours, key=lambda x:cv2.contourArea(x),reverse=True)
for cnt in contours:
(x, y, w, h) = cv2.boundingRect(cnt)
x_medium = int((x + x + w) / 2)
break 
cv2.line(frame, (x_medium, 0), (x_medium, 480), (0,255,0), 2)
cv2.imshow(“Frame”, frame)
key = cv2.waitKey(1)
if key == 27:
break
#Move robot 
if x_medium < center – 30:
position +=1.5
elif x_medium > center + 30:
position -= 1.5
pwm.setServoPosition(0,position)
cap.release()
cv2.destroyAllWindows()
class GardenerAction(object):
turnOn = “on”
turnoff = “off”
def threaded(job_func,action=GardenerAction.turnOn, forLength=None):
job_thread = threading.Thread(target=job_func, kwargs={‘action’:action,
‘forLength’:forLength})
job_thread.start()
def water(action=GardenerAction.turnOn, forLength=None):
toggleComponent(PUMP_PIN,action, forLength)
def light(action=GardenerAction.turnOn, forLength=None):
toggleComponent(LIGHT_PIN,action, forLength)
def toggleComponent (pin, action=GardenerAction.turnOn, forLength=None):
if (forLength is not None):
GPIO.output(pin,GPIO.HIGH) 
time.sleep(forLength)
GPIO.output(pin,GPIO.LOW)
else:
if action == GardenerAction.turnOn: GPIO.output(pin, GPIO.HIGH)
else: 
GPIO.output(pin,GPIO.LOW)
def exit_handler():
GPIO.cleanup()
atexit.register(exit_handler) # Turn water on every 30 min for 10 sec
 schedule.every(30).minutes.do(threaded, water, forLength=10)
#schedule.every().hour.do(threaded, light, forLength=300)
#schedule.every().day.at(“10:30”).do(threaded,light,action=GardenerAction.turnOn)
#schedule.every().day.at(“12:30”).do(threaded,light,action=GardenerAction.turnOff)
#schedule.every().monday.do(threaded, water, forLength=30)
#schedule.every().wednesday.at(“13:15”).do(threaded, light, forLength=30)
while True:
schedule.run_pending() time.sleep(1) 